# (1,2), (2,2), (2,3) and (3,2):
# Constants
import random
NORTH = 'n'
EAST = 'e'
SOUTH = 's'
WEST = 'w'
coin_cells = [(1,2), (2,2), (2,3), (3,2)]

def move(direction, col, row):
    ''' Returns updated col, row given the direction '''
    if direction == NORTH:
        row += 1
    elif direction == SOUTH:
        row -= 1
    elif direction == EAST:
        col += 1
    elif direction == WEST:
        col -= 1
    return(col, row)    

def is_victory(col, row):
    ''' Return true if player is in the victory cell '''
    return col == 3 and row == 1 # (3,1)

#def is_coin(col,row)


def print_directions(directions_str):
    print("You can travel: ", end='')
    first = True
    for ch in directions_str:
        if not first:
            print(" or ", end='')
        if ch == NORTH:
            print("(N)orth", end='')
        elif ch == EAST:
            print("(E)ast", end='')
        elif ch == SOUTH:
            print("(S)outh", end='')
        elif ch == WEST:
            print("(W)est", end='')
        first = False
    print(".")


        
def lever(col,row,coins,cells):
    lever_str  = "Pull a lever (y/n):"
    yes = "y"
    no = "n"
    if (col,row) in cells:
        answer = random.choice([yes,no])
        print(lever_str,answer)
        if answer == yes:
            coins += 1
            print("You received 1 coin, your total is now", coins, end='.\n')
        else:
            pass
    return coins



def find_directions(col, row):
    ''' Returns valid directions as a string given the supplied location '''
    if col == 1 and row == 1:   # (1,1)
        valid_directions = NORTH
    elif col == 1 and row == 2: # (1,2)
        valid_directions = NORTH+EAST+SOUTH
    elif col == 1 and row == 3: # (1,3)
        valid_directions = EAST+SOUTH
    elif col == 2 and row == 1: # (2,1)
        valid_directions = NORTH
    elif col == 2 and row == 2: # (2,2)
        valid_directions = SOUTH+WEST
    elif col == 2 and row == 3: # (2,3)
        valid_directions = EAST+WEST
    elif col == 3 and row == 2: # (3,2)
        valid_directions = NORTH+SOUTH
    elif col == 3 and row == 3: # (3,3)
        valid_directions = SOUTH+WEST
    return valid_directions

def play_one_move(col, row, valid_directions,coin_cells,moves):
    ''' Plays one move of the game
        Return if victory has been obtained and updated col,row '''
    victory = False
    direction = random.choice(["n", "e", "s", "w"])
    print("Direction:", direction)
    
    if not direction in valid_directions:
        print("Not a valid direction!")
        moves +=1
        if (col,row) in coin_cells:
            coin_cells.remove((col,row))
    else:
        col, row = move(direction, col, row)
        victory = is_victory(col, row)
        moves +=1
    return victory, col, row, moves

# The main program starts here
def main():
    victory = False
    row = 1
    col = 1
    coins = 0
    moves = 0
    seed = int(input("Input seed: "))
    random.seed(seed)
    while not victory:
        valid_directions = find_directions(col, row)
        coins = lever(col, row, coins,coin_cells)
        print_directions(valid_directions)
        victory, col, row,moves = play_one_move(col, row, valid_directions,coin_cells,moves)
    print("Victory! Total coins",coins,"Moves",moves,end='.\n')
    svar = input("Play again (y/n): ")
    return svar
# "y"
nidurstada = main()
while nidurstada == "y":
    nidurstada = main()



